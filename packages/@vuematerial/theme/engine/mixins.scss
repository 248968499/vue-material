/**
 * Override extending the default palette giving new values. It will extend
 * the default values of the palette if has a property missing.
 * ---
 * Usage example:
 *
 * @include md-override-palette ((
 *   accent: blue,
 *   theme: "dark"
 * ))
 *
 * ---
 * @access public
 * @param {map} $palette —  The new palette
 */

@mixin md-override-palette ($palette) {
  $md-default-palette: map-merge($md-default-palette, $palette) !global;
}


/**
 * Create a new theme based on a given palette. It will extend the default
 * values of the palette if has a property missing.
 * ---
 * Usage example:
 *
 * @include md-register-theme("alternative", (
 *   primary: #212121,
 *   accent: #CDDC39,
 *   theme: dark
 * ));
 *
 * ---
 * @access public
 * @param {string} $name —  The theme name to be used with the Vue Material
 * @param {map} $palette [$md-default-palette] —  The theme palette
 */

@function md-generate-base-palette-color($color) {
  $color-contrast: md-pick-contrast($color);

  @if $color-contrast == 'dark' {
    @return lighten($color, 15%);
  }

  @return darken($color, 10%);
}

@function md-generate-base-palette($palette) {
  $primary-dark: map-get($palette, primary-dark);
  $primary-light: map-get($palette, primary-light);
  $accent-dark: map-get($palette, accent-dark);
  $accent-light: map-get($palette, accent-light);

  @if $primary-dark == null {
    $primary-dark: md-generate-base-palette-color(map-get($palette, primary))
  }

  @if $primary-light == null {
    $primary-light: md-generate-base-palette-color(map-get($palette, primary))
  }

  @if $accent-dark == null {
    $accent-dark: md-generate-base-palette-color(map-get($palette, accent))
  }

  @if $accent-light == null {
    $accent-light: md-generate-base-palette-color(map-get($palette, accent))
  }

  @return map-merge($palette, (
    primary-dark: $primary-dark,
    primary-light: $primary-light,
    accent-dark: $accent-dark,
    accent-light: $accent-light
  ));
}

@mixin md-register-theme ($name, $palette: $md-default-palette, $overrides: (), $css-variables: false) {
  $palette: map-merge($md-default-palette, md-generate-base-palette($palette));
  $theme: map-merge($md-themes, (
    #{$name}: $palette
  ));

  @if $css-variables == true {
    :root {
      @each $type, $value in $palette {
        --md-theme-#{$name}-#{$type}: #{$value}
      }
    }
  }

  $md-themes: $theme !global;
  $md-theme-overrides: map-merge($md-theme-overrides, $overrides) !global;
  $md-css-variables: $css-variables !global;
}


/**
 * Theme pieces of a given scss code for all pre registered themes.
 * ---
 * Usage example:
 *
 * .md-button {
 *   min-width: 88px;
 *   height: 40px;
 *   display: inline-block;
 *   border-radius: 2px;
 *   transition: .3s ease;
 *
 *   @include md-theme-component() {
 *     background: md-theme(primary);
 *     color: md-theme(text-primary);
 *   }
 *
 *   &.md-accent {
 *     @include md-theme-component() {
 *       background: md-theme(accent);
 *       color: md-theme(text-accent);
 *     };
 *   }
 * }
 */

@mixin md-theme-component () {
  @each $theme, $palette in $md-themes {
    $md-theme-palette: map-merge($md-theme-palette, $palette) !global;
    $md-current-theme: $theme !global;

    .md-theme-#{$theme} & {
      @content;
    }
  }
}


/**
 * Theme a single css property
 * ---
 * Usage example:
 *
 * .md-button {
 *   min-width: 88px;
 *   height: 40px;
 *   display: inline-block;
 *   border-radius: 2px;
 *   transition: .3s ease;
 *
 *   @include md-theme-component() {
 *     @include md-theme-property(background, primary);
 *     @include md-theme-property(color, text-primary, primary);
 *   }
 *
 *   &.md-accent {
 *     @include md-theme-component() {
 *       @include md-theme-property(background, accent);
 *       @include md-theme-property(color, text-primary, accent);
 *     }
 *   }
 * }
 *
 * ---
 * @access public
 * @param {string} $property —  The css property
 * @param {string} $type —  A palette type
 * @param {string} $background —  The background color to analyse contrast
 * @param {number} $opacity —  The opacity amount
 */

@mixin md-theme-property ($property, $type, $background: "", $opacity: "") {
  $value: md-theme($type, $background);
  $variant: null;

  @if $background != "" {
    $variant: -on-#{$background};
  }

  @if $opacity != "" {
    $value: rgba($value, $opacity);
  }

  #{$property}: $value;

  @if $md-css-variables == true {
    #{$property}: var(--md-theme-#{$md-current-theme}-#{$type}#{$variant}, $value);
  }
}


/**
 * Override a property based in the current theme
 * ---
 * Usage example:
 *
 * .md-button {
 *   min-width: 88px;
 *   height: 40px;
 *   display: inline-block;
 *   border-radius: 2px;
 *   transition: .3s ease;
 *
 *   @include md-theme-component() {
 *     @include md-theme-override-property(border-radius, 'global-radius', 'button-radius');
 *   }
 * }
 *
 * ---
 * @access public
 * @param {string} $property —  The css property
 * @param {string} $var —  override value declared when creating a theme
 * @param {string} $name —  a meaningful name to be provided as css variable
 */

@mixin md-theme-override-property ($property, $var, $name) {
  $value: map-get($md-theme-overrides, $var);

  @if $value != null {
    #{$property}: $value;

    @if $md-css-variables == true {
      #{$property}: var(--md-theme-#{$md-current-theme}-$name, $value);
    }
  }
}
